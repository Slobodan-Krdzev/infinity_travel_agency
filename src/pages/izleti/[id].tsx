import Banner from "@/components/Banner";
import CarousellArangements from "@/components/CarousellArangements";
import CarousellPictures from "@/components/CarousellPictures";
import SectionTitle from "@/components/SectionTitle";
import { ALL_ARANGEMENTS } from "@/constants/constants";
import { Arangement } from "@/types/types";
import { Stack, Typography } from "@mui/material";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import React from "react";
import "react-multi-carousel/lib/styles.css";


type SingleTripProps = {
  tripToRender: Arangement;
  allTrips: Arangement[]
};

const SingleTrip: NextPage<SingleTripProps> = ({
  tripToRender: { name, description, transportationDescription, gallery },
  allTrips
}) => {
  return (
    <>
      <Head>
        <title>{name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <Banner image={"izletBanner.png"} />
      <SectionTitle text={name} />
      <Stack
        style={{
          width: "80%",
          margin: "0 auto 2rem",
        }}
      >
        <Stack direction={"row"} spacing={3} marginBottom={'1rem'}>
          <Link href={"#description"} className="link">
            Опис
          </Link>
          <Link href={"#picturesCarousell"} className="link">
            Галерија
          </Link>
        </Stack>

        <Typography variant="h1" component="h2" marginBottom={'2rem'}>
          {name} Tура
        </Typography>
        <Typography variant="h4" component="p" id="description">
          {description}
        </Typography>

        <section id="picturesCarousell">
            <CarousellPictures galery={gallery}/>
        </section>
        <Typography variant="h4" component="p">{transportationDescription}</Typography>
      </Stack>
      <SectionTitle text={'Повеќе'} />
      <CarousellArangements arangements={allTrips} type={"izlet"} />
    </>
  );
};

export default SingleTrip;

export const getStaticPaths: GetStaticPaths = async () => {
  const res = await fetch(
    `${ALL_ARANGEMENTS}?type_like=Izlet&isPublished=true`
  );
  const trips: Arangement[] = await res.json();

  const paths = trips.map((trip) => {
    return {
      params: {
        id: `${trip.id}`,
      },
    };
  });

  return {
    paths,
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const id = params?.id;

  try {
    const res = await fetch(
      `${ALL_ARANGEMENTS}?type_like=Izlet&isPublished=true&id=${id}`
    );
    const trip = await res.json();

    const tripToRender = trip[0];

    const allTripsRes = await fetch(`${ALL_ARANGEMENTS}?type_like=Izlet&isPublished=true`)
    const allTrips = await allTripsRes.json()

    return {
      props: {
        tripToRender,
        allTrips
      },
    };
  } catch (err) {
    return {
      notFound: true,
    };
  }
};
